通过Docker方式演示K8S如何利用CNI来管理容器网络的过程，这里采用手工敲命令的方式(实际是由CRI在做这件事):
kubelet 的CRI 先创建 pause 容器生成对应的 network namespace
调用网络 driver（因为配置的是 CNI，所以会调用 CNI 相关代码）
CNI driver 根据配置调用具体的 cni 插件
cni 插件给 pause 容器配置正确的网络
pod 中其他的容器都是用 pause 的网络

mkdir cni & cd cni
curl -O -L https://github.com/containernetworking/cni/releases/download/v0.4.0/cni-amd64-v0.4.0.tgz
tar -xf cni-amd64-v0.4.0.tgz
# ls
bridge  cni-amd64-v0.4.0.tgz  cnitool  dhcp  flannel  host-local  ipvlan  loopback  macvlan  noop  ptp  tuning

sudo ip link add br0 type bridge
sudo ifconfig br0 up
sudo ip netns add myns
sudo mkdir -p /etc/cni/net.d
cat << EOF | sudo tee /etc/cni/net.d/mybridge.conf
{
    "cniVersion": "0.2.0",
    "name": "mybridge",
    "type": "bridge",
    "bridge": "cni_bridge0",
    "isGateway": true,
    "ipMasq": true,
    "hairpinMode":true,
    "ipam": {
        "type": "host-local",
        "subnet": "10.15.20.0/24",
        "routes": [
            { "dst": "0.0.0.0/0" },
            { "dst": "1.1.1.1/32", "gw":"10.15.20.1"}
        ]
    }
}
EOF
sudo CNI_COMMAND=ADD CNI_CONTAINERID=1234567890 CNI_NETNS=/var/run/netns/myns CNI_IFNAME=eth0 CNI_PATH=`pwd` ./bridge < /etc/cni/net.d/mybridge.conf

$ sudo ip netns exec myns ip addr show eth0 |grep global
    inet 10.15.20.2/24 scope global eth0
$ sudo ip netns exec myns route -n
Kernel IP routing table
Destination     Gateway         Genmask         Flags Metric Ref    Use Iface
0.0.0.0         10.15.20.1      0.0.0.0         UG    0      0        0 eth0
1.1.1.1         10.15.20.1      255.255.255.255 UGH   0      0        0 eth0
10.15.20.0      0.0.0.0         255.255.255.0   U     0      0        0 eth0

proxychains4 sudo docker pull busybox
sudo apt install docker.io -y
cat << EOF | sudo tee /etc/docker/daemon.json
{
    "registry-mirrors":["https://bjtzu1jb.mirror.aliyuncs.com"]
}
EOF
sudo systemctl daemon-reload && sudo systemctl restart docker
contid=$(sudo docker run -d --name pause busybox:latest /bin/sleep 10000000)
#sudo docker run --net=container:$contid --rm busybox:latest ifconfig
pid=$(docker inspect -f '{{ .State.Pid }}' $contid)
netnspath=/proc/$pid/ns/net
sudo rm -rf /var/run/netns/pause1 && sudo ln -s /proc/$pid/ns/net /var/run/netns/pause1
sudo ip netns exec pause1 ip a
sudo docker exec -ti pause ping 10.15.20.2


上述是手工过程，CNI插件是kubelet以二进制的形式调用的，具体实现上主体为cmdAdd, cmdDel两大函数.
至于其中ipam接口如何调用，则不一定按照官方的ipam plugin规范编写，甚至可将ipam相关逻辑结合到cni plugin中
也可以独立服务，并通过API、RPC等方式调用。
更多地关于如何写CNI插件可以参考：深入理解CNI - https://www.cnblogs.com/YaoDD/p/7419383.html

package main

import (
...
)

const (
...
)

func cmdAdd(args *skel.CmdArgs) error {
    conf := types.NetConf{}
    if err := json.Unmarshal(args.StdinData, &conf); err != nil {
        log.Errorf("Error loading config from args: %v", err)
        return errors.Wrap(err, "add cmd: error loading config from args")
    }

    versionDecoder := &cniversion.ConfigDecoder{}
    confVersion, err := versionDecoder.Decode(args.StdinData)
    if err != nil {
        return err
    }

    // 在此实现：
    // 1. 调用ipam plugin接口进行ip申请
    // 2. 容器及宿主机各自网络栈内的操作，如创建veth，配置ip地址，配置路由等

    ips := []*current.IPConfig{{Version: "4", Address: *ipnet}}

    result := &current.Result{
        IPs: ips,
    }

    return cnitypes.PrintResult(result, confVersion)
}

func cmdDel(args *skel.CmdArgs) error {
    conf := types.NetConf{}
    if err := json.Unmarshal(args.StdinData, &conf); err != nil {
        log.Errorf("Error loading config from args: %v", err)
        return errors.Wrap(err, "add cmd: error loading config from args")
    }

    versionDecoder := &cniversion.ConfigDecoder{}
    confVersion, err := versionDecoder.Decode(args.StdinData)
    if err != nil {
        return err
    }

    // 在此实现：
    // 1. 调用ipam plugin接口进行ip释放
    // 2. 容器及宿主机各自网络栈内的操作，如删除veth，删除路由等

    return nil
}

func main() {
    log.SetLevel(log.DebugLevel)
    ConfigLocalFilesystemLogger(logPath, 24*60*time.Hour, 24*time.Hour)
    exitCode := 0

    if e := skel.PluginMainWithError(cmdAdd, nil, cmdDel, cniversion.All, "<版本说明等信息>"); e != nil {
        exitCode = 1
        log.Error("Failed CNI request: ", e)
        if err := e.Print(); err != nil {
            log.Error("Error writing error JSON to stdout: ", err)
        }
    }

    os.Exit(exitCode)
}
