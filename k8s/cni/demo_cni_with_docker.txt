
注意：本例中采用CNI工具包中现有的bridge来配置网络，所以它是"type": "bridge", 若是别的插件则例："type": "calico"

mkdir cni & cd cni
curl -O -L https://github.com/containernetworking/cni/releases/download/v0.4.0/cni-amd64-v0.4.0.tgz
tar -xf cni-amd64-v0.4.0.tgz
# ls
bridge  cni-amd64-v0.4.0.tgz  cnitool  dhcp  flannel  host-local  ipvlan  loopback  macvlan  noop  ptp  tuning

sudo ip link add br0 type bridge
sudo ifconfig br0 up
sudo mkdir -p /etc/cni/net.d
cat << EOF | sudo tee /etc/cni/net.d/mybridge.conf
{
    "cniVersion": "0.2.0",
    "name": "mybridge",
    "type": "bridge",
    "bridge": "cni_bridge0",
    "isGateway": true,
    "ipMasq": true,
    "hairpinMode":true,
    "ipam": {
        "type": "host-local",
        "subnet": "10.15.20.0/24",
        "routes": [
            { "dst": "0.0.0.0/0" },
            { "dst": "1.1.1.1/32", "gw":"10.15.20.1"}
        ]
    }
}
EOF
# add myns to network
sudo ip netns add myns
sudo CNI_COMMAND=ADD CNI_CONTAINERID=1234567890 CNI_NETNS=/var/run/netns/myns CNI_IFNAME=eth0 CNI_PATH=`pwd` ./bridge < /etc/cni/net.d/mybridge.conf

上面CNI要做的事情就完了，创建了一个CNI GW=cni_bridge0=10.15.20.1, 并将它通过peer devices和物理网卡eth0相连。
还打开了ipv4_forward与SNAT允许还是docker0网段的流量


下面在docker0上再创建一个测试容器（叫pause1), 它就能访问CNI_GW了，进而访问外部
sudo apt install docker.io -y
cat << EOF | sudo tee /etc/docker/daemon.json
{
    "registry-mirrors":["https://bjtzu1jb.mirror.aliyuncs.com"]
}
EOF
sudo systemctl daemon-reload && sudo systemctl restart docker
sudo docker pull busybox
contid=$(sudo docker run -d --name pause busybox:latest /bin/sleep 10000000)
#sudo docker run --net=container:$contid --rm busybox:latest ifconfig
pid=$(sudo docker inspect -f '{{ .State.Pid }}' $contid)
netnspath=/proc/$pid/ns/net
sudo rm -rf /var/run/netns/pause1 && sudo ln -s /proc/$pid/ns/net /var/run/netns/pause1
sudo ip netns exec pause1 ip a
sudo docker exec -ti pause ping 10.15.20.2


原理如下：
1, 当用docker创建一个名为pause1的nginx容器时, 它会使用默认网桥docker0来创建， pause1(172.17.0.2)自然能访问docker0 (172.17.0.1)
contid=$(sudo docker run -d --name pause busybox:latest /bin/sleep 10000000)
pid=$(sudo docker inspect -f '{{ .State.Pid }}' $contid)
netnspath=/proc/$pid/ns/net
sudo rm -rf /var/run/netns/pause1 && sudo ln -s /proc/$pid/ns/net /var/run/netns/pause1
sudo ip netns exec pause1 ip a
sudo docker exec -ti pause ping 10.15.20.2

2, 由于下列三个设置，172.17.0.2能够访问CNI GW(cni_brdige0-10.15.20.1
net.ipv4.ip_forward=1
SNAT(-A POSTROUTING -s 172.17.0.0/16 ! -o docker0 -j MASQUERADE
-A POSTROUTING -s 10.15.20.0/24 -j CNI-xx && -A CNI-xx -d 10.15.20.0/24 -j ACCEPT

3, cni_bridge0与eth0通过一对peer devices连在一起，172.17.0.2自然能访问eth0

4, kubelet调用CRI(docker-shim)时, CRI加载/etc/cni/net.d/mybridge.conf开始调用CNI。CNI插件是kubelet以二进制的形式调用的，实现上主要为cmdAdd, cmdDel两大函数. 所以cmdAdd需实现：
创建CNI GW(cni_bridge0)
创建peer devices连接cni_bridge)和eth0
创建相应的SNAT规则有打开net.ipv4.ip_forward



上述是手工过程，CNI插件是kubelet以二进制的形式调用的，具体实现上主体为cmdAdd, cmdDel两大函数.
至于其中ipam接口如何调用，则不一定按照官方的ipam plugin规范编写，甚至可将ipam相关逻辑结合到cni plugin中
也可以独立服务，并通过API、RPC等方式调用。

package main

import (
...
)

const (
...
)

func cmdAdd(args *skel.CmdArgs) error {
    conf := types.NetConf{}
    if err := json.Unmarshal(args.StdinData, &conf); err != nil {
        log.Errorf("Error loading config from args: %v", err)
        return errors.Wrap(err, "add cmd: error loading config from args")
    }

    versionDecoder := &cniversion.ConfigDecoder{}
    confVersion, err := versionDecoder.Decode(args.StdinData)
    if err != nil {
        return err
    }

    // 在此实现：
    // 1. 调用ipam plugin接口进行ip申请
    // 2. 容器及宿主机各自网络栈内的操作，如创建veth，配置ip地址，配置路由等

    ips := []*current.IPConfig{{Version: "4", Address: *ipnet}}

    result := &current.Result{
        IPs: ips,
    }

    return cnitypes.PrintResult(result, confVersion)
}

func cmdDel(args *skel.CmdArgs) error {
    conf := types.NetConf{}
    if err := json.Unmarshal(args.StdinData, &conf); err != nil {
        log.Errorf("Error loading config from args: %v", err)
        return errors.Wrap(err, "add cmd: error loading config from args")
    }

    versionDecoder := &cniversion.ConfigDecoder{}
    confVersion, err := versionDecoder.Decode(args.StdinData)
    if err != nil {
        return err
    }

    // 在此实现：
    // 1. 调用ipam plugin接口进行ip释放
    // 2. 容器及宿主机各自网络栈内的操作，如删除veth，删除路由等

    return nil
}

func main() {
    log.SetLevel(log.DebugLevel)
    ConfigLocalFilesystemLogger(logPath, 24*60*time.Hour, 24*time.Hour)
    exitCode := 0

    if e := skel.PluginMainWithError(cmdAdd, nil, cmdDel, cniversion.All, "<版本说明等信息>"); e != nil {
        exitCode = 1
        log.Error("Failed CNI request: ", e)
        if err := e.Print(); err != nil {
            log.Error("Error writing error JSON to stdout: ", err)
        }
    }

    os.Exit(exitCode)
}

